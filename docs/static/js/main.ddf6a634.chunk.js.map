{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","protoType","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"wOAIMA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAoBvC,OACI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SArBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,YAyB/BZ,EAAYe,UAAY,CACpBd,c,OAAee,EAAUC,KAAKC,YAGnBlB,Q,uBCrCFmB,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAaZM,GAbY,4CAAH,sDCWLO,EAXK,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAG9B,OADAc,QAAQC,IAAIN,EAAIC,EAAOV,GAEnB,yBAAKgB,UAAU,0CACX,yBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,2BAAIA,KCJHS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EAEZlB,mBAAS,CAC/ByB,KAAM,GACNe,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAsBtC,OAfAC,qBAAU,WAEN1B,EAAQC,GACH0B,MAAK,SAAAC,GACFH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAKtB,CAACtB,IAIGuB,EDlB2BK,CAAa5B,GAAjCa,EAJuB,EAI7BN,KAAce,EAJe,EAIfA,QAGtB,OACI,oCACI,wBAAIJ,UAAU,qCAAqClB,GAElDsB,GAAW,uBAAGJ,UAAU,oCAAb,WAGZ,yBAAKA,UAAU,aAEPL,EAAOJ,KAAI,SAACC,GAAD,OACP,kBAAC,EAAD,eACImB,IAAKnB,EAAIC,IACLD,UEYjBoB,EA/BM,WAAM,MAGahD,mBAAS,CAAC,cAHvB,mBAGhBiD,EAHgB,KAGJlD,EAHI,KASvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAE5B,6BAGA,4BAEQkD,EAAWtB,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACI6B,IAAK7B,EACLA,SAAUA,UCpBtCgC,IAASC,OAEP,kBAAC,EAAD,MAEAC,SAASC,eAAe,W","file":"static/js/main.ddf6a634.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        // console.log(e.target.value);\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue, ...cats]); //cats es el estado anterios de categorias //puse el ...cats al ultimo para que despues de buscar una categoria (por el inputValue) me la mande adelante y no abajo\r\n            setInputValue('');\r\n        }\r\n        // console.log('Submit hecho')\r\n\r\n    }\r\n    //El inputValue va a ser la ultima informacion de lo que usuario escribio\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.protoType = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","\r\n\r\nexport const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=1auQVuH0dRg2Fc2pCWwzPdCX4UFZagHm`\r\n    // encodeURI() lo que hace es que la peticion sea correcta por mas que la categoria tenga espacios por ejemplo\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url //el ? para asegurarnos de que traiga la info\r\n        }\r\n    })\r\n    return gifs;\r\n};\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n\r\n    console.log(id, title, url)\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    // const [count, setCount] = useState(0); //EJMPLO COMENTADO \r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n    // Renombre a data por images\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n            {/* Con el && dice que si lo de la izquierda es true entonces hace lo de la derecha, sino nada  */}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map((img) => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n                {/* <h3>{count}</h3>\r\n                <button onClick={() => setCount(count + 1)} ></button> */}\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false //en false xq ya termino de cargar \r\n                })\r\n\r\n            })\r\n\r\n    }, [category])\r\n\r\n\r\n\r\n    return state; // El state es {data: [], loading: true} esto es el state\r\n\r\n}\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    // const handleAdd = () => {\r\n    //     setCategories([...categories, 'HunterXHunter']);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n\r\n            <hr />\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\n\nReactDOM.render(\n\n  <GifExpertApp />,\n\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}